{"version":3,"sources":["components/editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","lauguage","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAWe,SAASA,EAAOC,GAAQ,IAE/BC,EAIAD,EAJAC,SACAC,EAGAF,EAHAE,YACAC,EAEAH,EAFAG,MACAC,EACAJ,EADAI,SAL8B,EAOVC,oBAAS,GAPC,mBAO3BC,EAP2B,KAOrBC,EAPqB,KAkBlC,OACI,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACI,sBAAKE,UAAU,eAAf,UACKN,EACD,wBACAO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAAAI,GAAQ,OAAKA,MAHpC,SAKI,cAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAAgBC,WAGtD,cAAC,aAAD,CACAC,eAjBR,SAAsBC,EAAQC,EAAMd,GACpCC,EAASD,IAiBDA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACLC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,aAAa,EACbC,MAAO,iBC/CR,SAASC,EAAgBC,EAAKC,GACzC,IAAMC,EAHK,aAGkBF,EAD0B,EAG9BpB,oBAAS,WAC9B,IAAMuB,EAAYC,aAAaC,QAAQH,GAEvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACAA,IAEAA,KAXwC,mBAGjDvB,EAHiD,KAG1C8B,EAH0C,KAoBvD,OALAC,qBAAU,WACNL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAClD,CAACwB,EAAaxB,IAGV,CAACA,EAAO8B,GCiCJI,MArDf,WAAgB,IAAD,EACWb,EAAgB,OAAO,IADlC,mBACNc,EADM,KACAC,EADA,OAESf,EAAgB,MAAO,IAFhC,mBAENgB,EAFM,KAEDC,EAFC,OAGOjB,EAAgB,KAAM,IAH7B,mBAGNkB,EAHM,KAGFC,EAHE,OAIetC,mBAAS,IAJxB,mBAINuC,EAJM,KAIEC,EAJF,KAmBb,OAbAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,mCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,wCAOR,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAEb,qCACE,sBAAKlC,UAAU,gBAAf,UACE,cAACT,EAAD,CACEE,SAAS,MACTC,YAAY,OACZC,MAAOmC,EAAMlC,SAAUmC,IAEzB,cAACxC,EAAD,CACUkD,SAAS,MACT/C,YAAY,MACZC,MAAOqC,EAAKpC,SAAUqC,IAEhC,cAAC1C,EAAD,CACUkD,SAAS,aACT/C,YAAY,KACZC,MAAOuC,EAAItC,SAAUuC,OAGjC,qBAAKnC,UAAU,OAAf,SACE,wBACAoC,OAAQA,EACRM,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eC3CfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1b9b4ded.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport 'codemirror/lib/codemirror.css' \r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport {  Controlled as ControlledEditor } from 'react-codemirror2'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nexport default function Editor(props) {\r\n    const {\r\n        language,\r\n        displayName,\r\n        value,\r\n        onChange\r\n    } = props\r\n    const [open, setOpen] = useState(true)\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function handleChange(editor, data, value){\r\n    onChange(value)\r\n}\r\n\r\n    return (\r\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n            <div className=\"editor-title\">\r\n                {displayName}\r\n                <button\r\n                type=\"button\"\r\n                className=\"expand-collapse-btn\"\r\n                onClick={() => setOpen(prevOpen => !prevOpen)}\r\n                >\r\n                    <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n                </button>\r\n            </div>\r\n            <ControlledEditor\r\n            onBeforeChange={handleChange}\r\n            value={value}\r\n            className=\"code-mirror-wrapper\"\r\n            options={{\r\n                lineWrapping: true,\r\n                lint: true,\r\n                mode: language,\r\n                lineNumbers: true,\r\n                theme: 'material',\r\n                \r\n            }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nconst PREFIX = 'code-edit-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const prefixedKey = PREFIX + key\r\n\r\n    const[value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n        if (typeof initialValue === 'function') {\r\n            return initialValue()\r\n        } else {\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport Editor from './editor'\nimport useLocalStorage from '../hooks/useLocalStorage'\nfunction App() {\n  const [html, setHtml] = useLocalStorage('html','')\n  const [css, setCss] = useLocalStorage('css', '')\n  const [js, setJs] = useLocalStorage('Js', '')\n  const [srcDoc, setSrcDoc] = useState('')\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n      <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n      </html>\n      `)\n    }, 250)\n\n    return () => clearTimeout(timeout)\n  }, [html, css, js])\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor \n          language=\"xml\" \n          displayName=\"HTML\" \n          value={html} onChange={setHtml} \n          />\n        <Editor\n                  lauguage=\"css\" \n                  displayName=\"CSS\" \n                  value={css} onChange={setCss} \n        />\n        <Editor \n                  lauguage=\"javascript\" \n                  displayName=\"JS\" \n                  value={js} onChange={setJs} \n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n        srcDoc={srcDoc} \n        title=\"output\"\n        sandbox=\"allow-scripts\"\n        frameBorder=\"0\"\n        width=\"100%\"\n        height=\"100%\"\n\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}